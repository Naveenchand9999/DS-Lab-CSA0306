#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100
#define MAX_QUEUE_SIZE 100

struct vertex {
  int data;
  int visited;
  struct vertex *next;
};

struct queue {
  int front;
  int rear;
  int items[MAX_QUEUE_SIZE];
};

struct graph {
  struct vertex *adj_list[MAX_VERTICES];
  int num_vertices;
};

void init_queue(struct queue *q) {
  q->front = 0;
  q->rear = -1;
}

int is_empty(struct queue *q) {
  return q->rear < q->front;
}

void enqueue(struct queue *q, int item) {
  if (q->rear == MAX_QUEUE_SIZE - 1) {
    printf("Queue is full\n");
    return;
  }
  q->items[++q->rear] = item;
}

int dequeue(struct queue *q) {
  if (is_empty(q)) {
    printf("Queue is empty\n");
    return -1;
  }
  return q->items[q->front++];
}

void add_edge(struct graph *g, int source, int dest) {
  struct vertex *new_vertex = (struct vertex*)malloc(sizeof(struct vertex));
  new_vertex->data = dest;
  new_vertex->visited = 0;
  new_vertex->next = g->adj_list[source];
  g->adj_list[source] = new_vertex;
}

void bfs(struct graph *g, int start_vertex) {
  struct queue q;
  init_queue(&q);

  enqueue(&q, start_vertex);

  while (!is_empty(&q)) {
    int current_vertex = dequeue(&q);
    if (g->adj_list[current_vertex]->visited) {
      continue;
    }
    g->adj_list[current_vertex]->visited = 1;
    printf("Visited vertex: %d\n", current_vertex);

    struct vertex *temp = g->adj_list[current_vertex];
    while (temp != NULL) {
      enqueue(&q, temp->data);
      temp = temp->next;
    }
  }
}

int main(void) {
  struct graph g;
  g.num_vertices = 4;

  add_edge(&g, 0, 1);
  add_edge(&g, 0, 2);
  add_edge(&g, 1, 2);
  add_edge(&g, 2, 0);
  add_edge(&g, 2, 3);
  add_edge(&g, 3, 3);

  printf("Breadth First Search starting from vertex 2:\n");
  bfs(&g, 2);

  return 0;
}
